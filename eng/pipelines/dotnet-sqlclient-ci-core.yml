#################################################################################
# Licensed to the .NET Foundation under one or more agreements.                 #
# The .NET Foundation licenses this file to you under the MIT license.          #
# See the LICENSE file in the project root for more information.                #
#################################################################################
parameters:
- name: 'debug'
  displayName: 'Enable debug output'
  type: boolean
  default: false

- name: targetFrameworks
  displayName: 'Target Frameworks on Windows'
  type: object
  default: [net462, net8.0, net9.0]

- name: targetFrameworksLinux
  displayName: 'Target Frameworks on Non-Windows'
  type: object
  default: [net8.0, net9.0]

- name: netcoreVersionTestUtils
  displayName: 'Netcore Version for Test Utilities'
  type: object
  default: net8.0

- name: buildPlatforms
  displayName: 'Build Platforms on Windows'
  type: object
  default: [AnyCPU]

- name: testSets
  displayName: 'Test Sets'
  type: object
  default: [1, 2, 3]

- name: useManagedSNI
  displayName: |
    Use Managed/Native SNI on Windows,
    values [false, true], [false] or [true] are allowed
  type: object
  default: [false, true]

- name: codeCovTargetFrameworks
  displayName: 'Code Coverage Target Frameworks'
  type: object
  default: [net462, net8.0]

- name: buildType
  displayName: 'Build Type'
  default: Project
  values:
    - Project
    - Package

- name: defaultPoolName
  type: string
  default: $(ci_var_defaultPoolName)

variables:
  - template: libraries/ci-build-variables.yml@self

  - name: artifactName
    value: Artifacts

  - name: defaultHostedPoolName
    value: 'Azure Pipelines'

stages:
  - stage: build_nugets
    displayName: 'Build NuGet Packages'
    jobs:
    - template: common/templates/jobs/ci-build-nugets-job.yml@self
      parameters:
        artifactName: $(artifactName)
  - template: common/templates/stages/ci-run-tests-stage.yml@self
    parameters:
      debug: ${{ parameters.debug }}
      buildType: ${{ parameters.buildType }}
      ${{ if eq(parameters.buildType, 'Package') }}:
        dependsOn: build_nugets

      prebuildSteps:
      - template: common/templates/steps/ci-prebuild-step.yml@self
        parameters:
          debug: ${{ parameters.debug }}
          artifactName: $(artifactName)
          buildType: ${{ parameters.buildType }}

      ${{ if eq(parameters.buildType, 'Project') }}:
        postTestJobs:
        - template: common/templates/jobs/ci-code-coverage-job.yml@self
          parameters:
            debug: ${{ parameters.debug }}
            downloadArtifactsSteps:
              - ${{ each targetFramework in parameters.codeCovTargetFrameworks }}:
                - task: DownloadPipelineArtifact@2
                  displayName: 'Download Coverage Reports [${{ targetFramework }}]'
                  inputs:
                    itemPattern: '**\${{ targetFramework }}*'
                    ${{ if contains(targetFramework, 'net4') }}:
                      targetPath: '$(Build.SourcesDirectory)\coverageNetFx'
                    ${{ else }}:
                      targetPath: '$(Build.SourcesDirectory)\coverageNetCore'

      testConfigurations:
        windows_enclave_sql:
          pool: ADO-CI-AE-1ES-Pool
          images: 
            Win22_Enclave_Sql19: ADO-MMS22-SQL19
          TargetFrameworks: ${{parameters.targetFrameworks }}
          netcoreVersionTestUtils: ${{parameters.netcoreVersionTestUtils }}
          buildPlatforms: ${{parameters.buildPlatforms }}
          testSets: [AE]
          useManagedSNI: ${{parameters.useManagedSNI }}
          codeCovTargetFrameworks: ${{parameters.codeCovTargetFrameworks }}
          configSqlFor: enclave
          operatingSystem: Windows
          configProperties:
            TCPConnectionStringHGSVBS: $(SQL_TCP_CONN_STRING_HGSVBS)
            TCPConnectionStringNoneVBS: $(SQL_TCP_CONN_STRING_NoneVBS)
            TCPConnectionStringAASSGX: $(SQL_TCP_CONN_STRING_AASSGX)
            EnclaveEnabled: true
            AADAuthorityURL: $(AADAuthorityURL)
            AADPasswordConnectionString: $(AAD_PASSWORD_CONN_STR)
            AADServicePrincipalId: $(AADServicePrincipalId)
            AADServicePrincipalSecret: $(AADServicePrincipalSecret)
            AzureKeyVaultUrl: $(AzureKeyVaultUrl)
            AzureKeyVaultTenantId: $(AzureKeyVaultTenantId)
            SupportsIntegratedSecurity: $(SupportsIntegratedSecurity)
            UserManagedIdentityClientId: $(UserManagedIdentityClientId)
            AliasName: $(SQLAliasName)            
            LocalDbAppName: $(LocalDbAppName)
            LocalDbSharedInstanceName: $(LocalDbSharedInstanceName)
