#################################################################################
# Licensed to the .NET Foundation under one or more agreements.                 #
# The .NET Foundation licenses this file to you under the MIT license.          #
# See the LICENSE file in the project root for more information.                #
#################################################################################
parameters:
  - name: platform
    type: string
    default: $(Platform)
  
  - name: configuration
    type: string
    default: $(Configuration)
  
  - name: buildNumber
    type: string
    default: $(BuildNumber)
  
  - name: operatingSystem
    type: string
    default: deferedToRuntime
    values:
      - Windows
      - Linux
      - MacOS
      - deferedToRuntime
    
  - name: build
    type: string
    default: MDS
    values:
      - MDS
      - AKV
      - all

steps:
- task: CmdLine@2
  displayName: 'Add nuget.org as a package source temporarily'
  inputs:
    script: |
      dotnet nuget remove source sqlclient --configfile $(build.sourcesDirectory)/NuGet.config
      dotnet nuget add source https://api.nuget.org/v3/index.json -n nuget.org --configfile $(build.sourcesDirectory)/NuGet.config
      dotnet nuget add source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json -n dotnet-eng --configfile $(build.sourcesDirectory)/NuGet.config

- task: UseDotNet@2
  displayName: 'Use .NET 9.x sdk'
  inputs:
    packageType: sdk
    version: '9.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: UseDotNet@2
  displayName: 'Install .NET 8.x runtime'
  inputs:
    packageType: runtime
    version: '8.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: CmdLine@2
  enabled: false
  displayName: 'Disable nuget.org as a package source'
  inputs:
    script: 'dotnet nuget disable source nuget.org --configfile $(build.sourcesDirectory)/NuGet.config'

- ${{ if or(eq(parameters.operatingSystem, 'Windows'), eq(parameters.operatingSystem, 'deferedToRuntime')) }}:
  - ${{ if or(eq(parameters.build, 'MDS'), eq(parameters.build, 'all')) }}:
    - task: MSBuild@1
      displayName: 'Restore nugets [Win]'
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
      inputs:
        solution: build.proj
        msbuildArchitecture: x64
        msbuildArguments: '-t:restore'
      retryCountOnTaskFailure: 1

    - task: MSBuild@1
      displayName: 'Build Driver [Win]'
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
      inputs:
        solution: build.proj
        msbuildArchitecture: x64
        platform: '${{ parameters.platform }}'
        configuration: '${{ parameters.configuration }}'
        msbuildArguments: '-t:BuildAllConfigurations -p:GenerateNuGet=false -p:BuildNumber=${{ parameters.buildNumber }}'
        clean: true

  - ${{ if or(eq(parameters.build, 'AKV'), eq(parameters.build, 'all')) }}:
    - task: MSBuild@1
      displayName: 'Build AKV Provider NetFx [Win]'
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
      inputs:
        solution: build.proj
        msbuildArchitecture: x64
        platform: '${{ parameters.platform }}'
        configuration: '${{ parameters.configuration }}'
        msbuildArguments: '-t:BuildAKVNetFx -p:BuildNumber=${{ parameters.buildNumber }}'

    - task: MSBuild@1
      displayName: 'Build AKV Provider NetCore All OS [Win]'
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))
      inputs:
        solution: build.proj
        msbuildArchitecture: x64
        platform: '${{ parameters.platform }}'
        configuration: '${{ parameters.configuration }}'
        msbuildArguments: '-t:BuildAKVNetCoreAllOS -p:BuildNumber=${{ parameters.buildNumber }}'

- ${{ if or(eq(parameters.operatingSystem, 'Linux'), eq(parameters.operatingSystem, 'MacOS'), eq(parameters.operatingSystem, 'deferedToRuntime')) }}:
  - task: Powershell@2
    displayName: 'List SDK versions'
    inputs:
      targetType: 'inline'
      script: 'dotnet --list-sdks'

  - task: Powershell@2
    displayName: 'List runtime versions'
    inputs:
      targetType: 'inline'
      script: 'dotnet --list-runtimes'

  - task: DotNetCoreCLI@2
    displayName: 'Build Driver [non-Win]'
    condition: and(succeeded(), ne(variables['Agent.OS'], 'Windows_NT'))
    inputs:
      command: custom
      projects: build.proj
      custom: msbuild
      arguments: '-t:BuildAll -p:TestEnabled=true -p:GenerateDocumentationFile=false -p:configuration=${{ parameters.configuration }}'
      verbosityRestore: Detailed
      verbosityPack: Detailed
    retryCountOnTaskFailure: 1
